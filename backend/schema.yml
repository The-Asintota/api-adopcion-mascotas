openapi: 3.0.3
info:
  title: Pet adoption API | NoCountry Cohorte17
  version: 1.0.0
  description: This guide provides detailed information on all available endpoints,
    including the HTTP methods they accept, the parameters they require, and the response
    formats they return. This documentation is designed to be a useful reference for
    both developers who maintain and extend the API, and frontend developers who consume
    it in their client applications. If you have any questions or encounter any problems,
    feel free to contact the development team.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
  /api/v1/admin/:
    post:
      operationId: v1_admin_create
      description: |-
        Handle POST requests for admin registration.

        This method allows the registration of a new admin. It waits for a POST
        request with a admin's data, validates the information, and then creates
        a new record if the data is valid or returns an error response if it is not.
      tags:
      - Administrators
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAdminRequest'
            examples:
              DataValid:
                value:
                  email: admin1@example.com
                  password: contraseña1234
                  confirm_password: contraseña1234
                  admin_name: Admin de la plataforma
                summary: Administrator user registration data.
                description: |-
                  A valid admin registration data. The following validations will be applied:
                  - **email:** Must be in a valid email format, no longer than 40 characters and not in use.
                  - **password:** Must be at least 8 characters, not more than 20 characters, and not a common or simple password.
                  - **confirm_password:** Must match the password.
                  - **admin_name:** Must not be longer than 50 characters and not in use.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterAdminRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterAdminRequest'
        required: true
      responses:
        '201':
          description: '**CREATED** The admin was created successfully.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
                    properties:
                      field:
                        type: array
                        items:
                          type: string
              examples:
                InvalidRequestData1:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - El correo electrónico es inválido.
                      - El correo electrónico no puede tener más de 40 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      password:
                      - La contraseña no puede tener más de 20 caracteres.La contraseña
                        debe tener al menos8 caracteres.
                      - La contraseña debe contener al menos una mayuscula o una minuscula.
                      - Esta contraseña es demasiado común.Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      admin_name:
                      - El nombre no puede tener más de 50 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                  summary: Invalid request data
                  description: These are all the basic error messages for each field,
                    in this example you can see how the messages will be sent. In
                    a real use case, the error message for the validation or validations
                    that have failed will be displayed.
                PasswordsNotMatch:
                  value:
                    code: invalid_request_data2
                    detail:
                      non_field_errors:
                      - Las contraseñas no coinciden.
                  summary: Passwords do not match
                  description: This error message is used when the passwords do not
                    match. In this example you can see how the information will be
                    represented.
                InvalidRequestData3:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - Este correo electrónico ya está en uso.
                  summary: Email already in use
                  description: This error message is used when the email is already
                    in use. In this example you can see how the information will be
                    represented.
          description: '**BAD_REQUEST**'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: This error message is used when the API cannot connect
                    to the database. In this example you can see how the information
                    will be represented.
          description: '**INTERNAL_SERVER_ERROR**'
  /api/v1/auth/:
    post:
      operationId: v1_auth_create
      description: |-
        Handle POST requests for user authentication.

        This method allows authentication of a user. It waits for a POST request
        with your credentials, validates the information, and then returns a
        response with the authentication tokens if the data is valid or returns an
        error response if it is not.
      tags:
      - JSON Web Token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
            examples:
              DataValid:
                value:
                  email: user1@example.com
                  password: contraseña1234
                summary: User authentication data.
                description: |-
                  Valid credentials for a user. The following validations will be applied:
                  - **email:** Must be in a valid email format and no longer than 40 characters.
                  - **password:** Must be at least 8 characters and not more than 20 characters.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  access:
                    type: string
                  refresh:
                    type: string
                  role:
                    type: string
              examples:
                ResponseOkShelter:
                  value:
                    access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzExMDU0MzYyLCJpYXQiOjE3MTEwNDcxNjIsImp0aSI6IjY0MTE2YzgyYjhmMDQzOWJhNTJkZGZmMzgyNzQ2ZTIwIiwidXNlcl9pZCI6IjJhNmI0NTNiLWZhMmItNDMxOC05YzM1LWIwZTk2ZTg5NGI2MyJ9.gfhWpy5rYY6P3Xrg0usS6j1KhEvF1HqWMiU7AaFkp9A
                    refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxMTEzMzU2MiwiaWF0IjoxNzExMDQ3MTYyLCJqdGkiOiI2ZTRmNTdkMGJjNTc0NWY0OWMzODg4YjQ2YTM1OTJjNSIsInVzZXJfaWQiOiIyYTZiNDUzYi1mYTJiLTQzMTgtOWMzNS1iMGU5NmU4OTRiNjMifQ.81pQ3WftFZs5O50vGqwY2a6yPkXArQK6WKyrwus3s6A
                    role: shelter
                  summary: Valid request for shelter
                  description: Authenticated shelter, the response will contain the
                    access, refresh tokens and role user.
                ResponseOkAdminUser:
                  value:
                    access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzExMDU0MzYyLCJpYXQiOjE3MTEwNDcxNjIsImp0aSI6IjY0MTE2YzgyYjhmMDQzOWJhNTJkZGZmMzgyNzQ2ZTIwIiwidXNlcl9pZCI6IjJhNmI0NTNiLWZhMmItNDMxOC05YzM1LWIwZTk2ZTg5NGI2MyJ9.gfhWpy5rYY6P3Xrg0usS6j1KhEvF1HqWMiU7AaFkp9A
                    refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxMTEzMzU2MiwiaWF0IjoxNzExMDQ3MTYyLCJqdGkiOiI2ZTRmNTdkMGJjNTc0NWY0OWMzODg4YjQ2YTM1OTJjNSIsInVzZXJfaWQiOiIyYTZiNDUzYi1mYTJiLTQzMTgtOWMzNS1iMGU5NmU4OTRiNjMifQ.81pQ3WftFZs5O50vGqwY2a6yPkXArQK6WKyrwus3s6A
                    role: adminuser
                  summary: Valid request for admin user
                  description: Authenticated admin user, the response will contain
                    the access, refresh tokens and role user.
          description: '**OK**'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
                    properties:
                      field:
                        type: array
                        items:
                          type: string
              examples:
                DataInvalid:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - El correo electrónico es inválido.
                      - El correo electrónico no puede tener más de 40 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      password:
                      - La contraseña no puede tener más de 20 caracteres.La contraseña
                        debe tener al menos8 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                  summary: Invalid request data
                  description: These are all the basic error messages for each field,
                    in this example you can see how the messages will be sent. In
                    a real use case, the error message for the validation or validations
                    that have failed will be displayed.
          description: '**BAD_REQUEST**'
        '401':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                AuthenticationFailed:
                  value:
                    code: authentication_failed
                    detail: Correo o contraseña inválida.
                  summary: Credentials invalid
                  description: The user's credentials are invalid.
                UserInactive:
                  value:
                    code: authentication_failed
                    detail: Cuenta del usuario inactiva.
                  summary: User inactive
                  description: The user's account is inactive.
          description: '**UNAUTHORIZED**'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: This error message is used when the API cannot connect
                    to the database. In this example you can see how the information
                    will be represented.
          description: '**INTERNAL_SERVER_ERROR**'
  /api/v1/pet/:
    post:
      operationId: v1_pet_create
      description: |-
        Handle POST requests for pet registration.

        This method allows the registration of a new pet. It waits for a POST
        request with a pet's data, validates the information, and then creates
        a new record if the data is valid or returns an error response if it is not.
      tags:
      - Pets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterPetRequest'
            examples:
              DataValid:
                value:
                  pet_name: Hector
                  pet_type: Perro
                  shelter: 58774f38-96f3-4550-a212-d35923c5bf9e
                  pet_race: Pastor alemán
                  pet_sex: Macho
                  pet_age: 2
                  pet_observations: Cachorro muy juguetón.
                  pet_description: Cachorro muy juguetón.
                  pet_image: https://example.com/image.png
                summary: Register a new pet.
                description: |-
                  A valid pet registration data. The following validation rules are applied:
                  - **pet_name:** the name must be less than 50 characters.
                  - **pet_type:** the type of pet must be either Perro or Gato.
                  - **pet_sex:** the sex of the pet must be Macho or Hembra.
                  - **shelter:** the shelter UUID must be a valid UUID.
                  - **pet_age:** the age must be between 1 and 99.
                  \pet_observations, pet_description, and pet_image fields are optional.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterPetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterPetRequest'
        required: true
      responses:
        '201':
          description: '**CREATED** The pet was created successfully.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
                    properties:
                      field:
                        type: array
                        items:
                          type: string
              examples:
                InvalidRequestData:
                  value:
                    code: invalid_request_data
                    detail:
                      pet_name:
                      - El nombre no puede tener más de 50 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      pet_type:
                      - Loro no es una elección válida.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      pet_sex:
                      - M no es una elección válida.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      shelter:
                      - 58774f38-96f3-4550-a212-d35923c5bf9e is not a valid UUID.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      pet_race:
                      - El valor ingresado es inválido.
                      - El valor ingresad no puede tener más de 50 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      pet_age:
                      - El valor ingresado es inválido.
                      - Asegúrate que este valor sea menor o igual a 99.
                      - Asegúrate que este valor sea mayor o igual a 1.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      pet_observations:
                      - El valor ingresado no puede tener más de 200 caracteres.
                      pet_description:
                      - El valor ingresado no puede tener más de 200 caracteres.
                      pet_image:
                      - El valor ingresado no puede tener más de 200 caracteres.
                  summary: Invalid request data
                  description: These are all the basic error messages for each field,
                    in this example you can see how the messages will be sent. In
                    a real use case, the error message for the validation or validations
                    that have failed will be displayed.
          description: '**BAD_REQUEST**'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: This error message is used when the API cannot connect
                    to the database. In this example you can see how the information
                    will be represented.
          description: '**INTERNAL_SERVER_ERROR**'
  /api/v1/pet/{shelter_uuid}/:
    get:
      operationId: v1_pet_retrieve
      description: |-
        Handle GET requests for retrieving pets from a specific shelter.

        This method allows the retrieval of pets from a specific shelter. It waits
        for a GET request with a shelter's UUID, retrieves the pets from the database,
        and returns a paginated response with the pets' information.
      parameters:
      - in: path
        name: shelter_uuid
        schema:
          type: string
        required: true
      tags:
      - Pets
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                  previous:
                    type: string
                  field:
                    type: array
                    items:
                      type: object
              examples:
                RequestSuccess:
                  value:
                    count: 57
                    next: http://127.0.0.1:8000/api/v1/pet/97c6efb5d6cc429098e0047bde3de168/?page=2
                    previous: null
                    results:
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                  summary: Request successful
                  description: This is an example of a successful request. In this
                    example, you can see how the information will be represented.
          description: '**OK**'
        '404':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
                    properties:
                      field:
                        type: string
              examples:
                PetNotFound:
                  value:
                    code: pet_not_found
                    detail:
                      message: pet with the following filters not found.
                      filters:
                        shelter: 97c6efb5d6cc429098e0047bde3de169
                  summary: Shelter not found
                  description: These are all the basic error messages for each field,
                    in this example you can see how the messages will be sent. In
                    a real use case, the error message for the validation or validations
                    that have failed will be displayed.
          description: '**NOT_FOUND**'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: This error message is used when the API cannot connect
                    to the database. In this example you can see how the information
                    will be represented.
          description: '**INTERNAL_SERVER_ERROR**'
  /api/v1/shelter/:
    post:
      operationId: v1_shelter_create
      description: |-
        Handle POST requests for shelter registration.

        This method allows the registration of a new shelter. It waits for a POST
        request with a shelter's data, validates the information, and then creates
        a new record if the data is valid or returns an error response if it is not.
      tags:
      - Shelters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterShelterRequest'
            examples:
              DataValid:
                value:
                  email: shelter1@example.com
                  password: contraseña1234
                  confirm_password: contraseña1234
                  shelter_phone_number: +57 3213149578
                  shelter_name: Refugio de animales
                  shelter_address: 'Calle 123 # 45-67'
                  shelter_responsible: Juan Pérez
                  shelter_logo: https://example.com/logo.png
                summary: Register a new shelter.
                description: |-
                  A valid shelter registration data. The following validations will be applied:
                  - **email:** Must be in a valid email format, no longer than 40 characters and not in use.
                  - **password:** Must be at least 8 characters, not more than 20 characters, and not a common or simple password.
                  - **confirm_password:** Must match the password.
                  - **shelter_phone_number:** Must be a valid phone number, no longer than 25 characters.
                  - **shelter_name:** Must not be longer than 50 characters and not in use.
                  - **shelter_address:** Must not be longer than 100 characters.
                  - **shelter_responsible:** Must not be longer than 50 characters.
                  - **shelter_logo:** Must not be longer than 200 characters.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterShelterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterShelterRequest'
        required: true
      responses:
        '201':
          description: '**CREATED** The shelter was created successfully.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
                    properties:
                      field:
                        type: array
                        items:
                          type: string
              examples:
                InvalidRequestData1:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - El correo electrónico es inválido.
                      - El correo electrónico no puede tener más de 40 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      password:
                      - La contraseña no puede tener más de 20 caracteres.La contraseña
                        debe tener al menos8 caracteres.
                      - La contraseña debe contener al menos una mayuscula o una minuscula.
                      - Esta contraseña es demasiado común.Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      shelter_phone_number:
                      - El número de teléfono es inválido.
                      - El número de teléfono no puede tener más de 25 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      shelter_name:
                      - El nombre no puede tener más de 50 caracteres.
                      - Este nombre ya está en uso.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      shelter_address:
                      - El dirección no puede tener más de 100 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      shelter_responsible:
                      - El valor ingresado no puede tener más de 50 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      shelter_logo:
                      - El valor ingresado no puede tener más de 200 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                  summary: Invalid request data
                  description: These are all the basic error messages for each field,
                    in this example you can see how the messages will be sent. In
                    a real use case, the error message for the validation or validations
                    that have failed will be displayed.
                PasswordsNotMatch:
                  value:
                    code: invalid_request_data2
                    detail:
                      non_field_errors:
                      - Las contraseñas no coinciden.
                  summary: Passwords do not match
                  description: This error message is used when the passwords do not
                    match. In this example you can see how the information will be
                    represented.
                InvalidRequestData3:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - Este correo electrónico ya está en uso.
                  summary: Email already in use
                  description: This error message is used when the email is already
                    in use. In this example you can see how the information will be
                    represented.
          description: '**(BAD_REQUEST)**'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: This error message is used when the API cannot connect
                    to the database. In this example you can see how the information
                    will be represented.
          description: '**INTERNAL_SERVER_ERROR**'
components:
  schemas:
    AuthenticationRequest:
      type: object
      description: |-
        Handles the data for user authentication. Checks that the provided email and
        password meet the necessary requirements.
      properties:
        email:
          type: string
          minLength: 1
          pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
          maxLength: 40
        password:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 20
      required:
      - email
      - password
    PetSexEnum:
      enum:
      - Macho
      - Hembra
      type: string
      description: |-
        * `Macho` - Macho
        * `Hembra` - Hembra
    PetTypeEnum:
      enum:
      - Perro
      - Gato
      type: string
      description: |-
        * `Perro` - Perro
        * `Gato` - Gato
    RegisterAdminRequest:
      type: object
      description: Defines the data required to register a admin in the system.
      properties:
        email:
          type: string
          minLength: 1
          pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
          maxLength: 40
        password:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 20
        confirm_password:
          type: string
          writeOnly: true
          minLength: 1
        admin_name:
          type: string
          minLength: 1
          maxLength: 50
      required:
      - admin_name
      - confirm_password
      - email
      - password
    RegisterPetRequest:
      type: object
      description: Defines the data required to register a pet in the system.
      properties:
        pet_name:
          type: string
          minLength: 1
          maxLength: 50
        pet_type:
          $ref: '#/components/schemas/PetTypeEnum'
        pet_sex:
          $ref: '#/components/schemas/PetSexEnum'
        shelter:
          type: string
          format: uuid
        pet_race:
          type: string
          minLength: 1
          maxLength: 50
        pet_age:
          type: integer
          maximum: 99
          minimum: 1
        pet_observations:
          type: string
          minLength: 1
          maxLength: 200
        pet_description:
          type: string
          minLength: 1
          maxLength: 200
        pet_image:
          type: string
          format: uri
          minLength: 1
          maxLength: 200
      required:
      - pet_age
      - pet_name
      - pet_race
      - pet_sex
      - pet_type
      - shelter
    RegisterShelterRequest:
      type: object
      description: Defines the data required to register a shelter in the system.
      properties:
        email:
          type: string
          minLength: 1
          pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
          maxLength: 40
        password:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 20
        confirm_password:
          type: string
          writeOnly: true
          minLength: 1
        shelter_phone_number:
          type: string
          minLength: 1
          maxLength: 25
        shelter_name:
          type: string
          minLength: 1
          maxLength: 50
        shelter_address:
          type: string
          minLength: 1
          maxLength: 100
        shelter_responsible:
          type: string
          minLength: 1
          maxLength: 50
        shelter_logo:
          type: string
          format: uri
          minLength: 1
          maxLength: 200
      required:
      - confirm_password
      - email
      - password
      - shelter_address
      - shelter_name
      - shelter_phone_number
      - shelter_responsible
tags:
- name: JSON Web Token
  description: It comprises all the endpoints that manage all the functionality related
    to the authentication of a user in the API.
- name: Administrators
  description: It comprises all the endpoints that manage all the functionality related
    to an administrator in the API.
- name: Shelters
  description: It comprises all the endpoints that manage all the functionality related
    to a shelter in the API.
- name: Pets
  description: It comprises all the endpoints that manage all the functionality related
    to a pet in the API.
