openapi: 3.0.3
info:
  title: Pet adoption API | NoCountry Cohorte17
  version: 1.0.0
  description: This guide provides detailed information on all available endpoints,
    including the HTTP methods they accept, the parameters they require, and the response
    formats they return. This documentation is designed to be a useful reference for
    both developers who maintain and extend the API, and frontend developers who consume
    it in their client applications. If you have any questions or encounter any problems,
    feel free to contact the development team.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
  /api/v1/admin/:
    post:
      operationId: register_admin
      description: |-
        Handle POST requests for user registration with the administrator role.

        This method allows the registration of a new admin. It waits for a POST
        request with a admin's data, validates the information, and then creates
        a new record if the data is valid or returns an error response if it is not.
      tags:
      - Administrators
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminRequest'
            examples:
              DataValid:
                value:
                  email: admin1@example.com
                  password: contraseña1234
                  confirm_password: contraseña1234
                  admin_name: Admin de la plataforma
                summary: Administrator user registration data.
                description: |-
                  A valid admin registration data. The following validations will be applied:
                  - **email:** Must be in a valid email format, no longer than 40 characters and not in use.
                  - **password:** Must be at least 8 characters, not more than 20 characters, and not a common or simple password.
                  - **confirm_password:** Must match the password.
                  - **admin_name:** Must not be longer than 50 characters and not in use.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdminRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminRequest'
        required: true
      responses:
        '201':
          description: '**CREATED** The admin was created successfully.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
                    properties:
                      field:
                        type: array
                        items:
                          type: string
              examples:
                InvalidRequestData1:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - El correo electrónico es inválido.
                      - El correo electrónico no puede tener más de 40 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      password:
                      - La contraseña no puede tener más de 20 caracteres.La contraseña
                        debe tener al menos8 caracteres.
                      - La contraseña debe contener al menos una mayuscula o una minuscula.
                      - Esta contraseña es demasiado común.Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      admin_name:
                      - El nombre no puede tener más de 50 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                  summary: Invalid request data
                  description: These are all the basic error messages for each field,
                    in this example you can see how the messages will be sent. In
                    a real use case, the error message for the validation or validations
                    that have failed will be displayed.
                PasswordsNotMatch:
                  value:
                    code: invalid_request_data2
                    detail:
                      confirm_password:
                      - Las contraseñas no coinciden.
                  summary: Passwords do not match
                  description: This error message is used when the passwords do not
                    match. In this example you can see how the information will be
                    represented.
                InvalidRequestData3:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - Este correo electrónico ya está en uso.
                  summary: Email already in use
                  description: This error message is used when the email is already
                    in use. In this example you can see how the information will be
                    represented.
          description: '**BAD_REQUEST**'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: This error message is used when the API cannot connect
                    to the database. In this example you can see how the information
                    will be represented.
          description: '**INTERNAL_SERVER_ERROR**'
  /api/v1/auth/:
    post:
      operationId: v1_auth_create
      description: |-
        Handle POST requests for user authentication.

        This method allows authentication of a user. It waits for a POST request
        with your credentials, validates the information, and then returns a
        response with the authentication tokens if the data is valid or returns an
        error response if it is not.
      tags:
      - JSON Web Token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
            examples:
              DataValid:
                value:
                  email: user1@example.com
                  password: contraseña1234
                summary: User authentication data.
                description: |-
                  Valid credentials for a user. The following validations will be applied:
                  - **email:** Must be in a valid email format and no longer than 40 characters.
                  - **password:** Must be at least 8 characters and not more than 20 characters.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  access:
                    type: string
                  refresh:
                    type: string
                  role:
                    type: string
              examples:
                ResponseOkShelter:
                  value:
                    access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzExMDU0MzYyLCJpYXQiOjE3MTEwNDcxNjIsImp0aSI6IjY0MTE2YzgyYjhmMDQzOWJhNTJkZGZmMzgyNzQ2ZTIwIiwidXNlcl9pZCI6IjJhNmI0NTNiLWZhMmItNDMxOC05YzM1LWIwZTk2ZTg5NGI2MyJ9.gfhWpy5rYY6P3Xrg0usS6j1KhEvF1HqWMiU7AaFkp9A
                    refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxMTEzMzU2MiwiaWF0IjoxNzExMDQ3MTYyLCJqdGkiOiI2ZTRmNTdkMGJjNTc0NWY0OWMzODg4YjQ2YTM1OTJjNSIsInVzZXJfaWQiOiIyYTZiNDUzYi1mYTJiLTQzMTgtOWMzNS1iMGU5NmU4OTRiNjMifQ.81pQ3WftFZs5O50vGqwY2a6yPkXArQK6WKyrwus3s6A
                    role: shelter
                  summary: Valid request for shelter
                  description: Authenticated shelter, the response will contain the
                    access, refresh tokens and role user.
                ResponseOkAdminUser:
                  value:
                    access: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzExMDU0MzYyLCJpYXQiOjE3MTEwNDcxNjIsImp0aSI6IjY0MTE2YzgyYjhmMDQzOWJhNTJkZGZmMzgyNzQ2ZTIwIiwidXNlcl9pZCI6IjJhNmI0NTNiLWZhMmItNDMxOC05YzM1LWIwZTk2ZTg5NGI2MyJ9.gfhWpy5rYY6P3Xrg0usS6j1KhEvF1HqWMiU7AaFkp9A
                    refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcxMTEzMzU2MiwiaWF0IjoxNzExMDQ3MTYyLCJqdGkiOiI2ZTRmNTdkMGJjNTc0NWY0OWMzODg4YjQ2YTM1OTJjNSIsInVzZXJfaWQiOiIyYTZiNDUzYi1mYTJiLTQzMTgtOWMzNS1iMGU5NmU4OTRiNjMifQ.81pQ3WftFZs5O50vGqwY2a6yPkXArQK6WKyrwus3s6A
                    role: adminuser
                  summary: Valid request for admin user
                  description: Authenticated admin user, the response will contain
                    the access, refresh tokens and role user.
          description: '**OK**'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
                    properties:
                      field:
                        type: array
                        items:
                          type: string
              examples:
                DataInvalid:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - El correo electrónico es inválido.
                      - El correo electrónico no puede tener más de 40 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      password:
                      - La contraseña no puede tener más de 20 caracteres.La contraseña
                        debe tener al menos8 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                  summary: Invalid request data
                  description: These are all the basic error messages for each field,
                    in this example you can see how the messages will be sent. In
                    a real use case, the error message for the validation or validations
                    that have failed will be displayed.
          description: '**BAD_REQUEST**'
        '401':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                AuthenticationFailed:
                  value:
                    code: authentication_failed
                    detail: Correo o contraseña inválida.
                  summary: Credentials invalid
                  description: The user's credentials are invalid.
                UserInactive:
                  value:
                    code: authentication_failed
                    detail: Cuenta del usuario inactiva.
                  summary: User inactive
                  description: The user's account is inactive.
          description: '**UNAUTHORIZED**'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: This error message is used when the API cannot connect
                    to the database. In this example you can see how the information
                    will be represented.
          description: '**INTERNAL_SERVER_ERROR**'
  /api/v1/email/:
    get:
      operationId: get_all_emails
      description: |-
        Handles the GET request to retrieve all the emails sent.

        This method returns a paginated response with the list of emails sent.
      tags:
      - Emails
      security:
      - JWTAuthentication: []
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                  previous:
                    type: string
                  field:
                    type: array
                    items:
                      type: object
              examples:
                RequestSuccess:
                  value:
                    count: 57
                    next: http://127.0.0.1:8000/api/v1/email/?page=2
                    previous: null
                    results:
                    - uuid: 44c79edd-1188-45dc-85af-7398ddee0546
                      subject: Solicitud de adopción
                      message: Mensaje de prueba.
                      addressee: refugio11@email.com
                      additional_info:
                        pet_name: Macota 1
                        user_name: User 1
                        user_email: user1@email.com
                        user_phone: '+573212547790'
                    - uuid: 44c79edd-1188-45dc-85af-7398ddee0546
                      subject: Solicitud de adopción
                      message: Mensaje de prueba.
                      addressee: refugio2@email.com
                      additional_info:
                        pet_name: Macota 2
                        user_name: User 2
                        user_email: user2@email.com
                        user_phone: '+573202447980'
                    - uuid: 44c79edd-1188-45dc-85af-7398ddee0546
                      subject: Solicitud de adopción
                      message: Mensaje de prueba.
                      addressee: refugio3@email.com
                      additional_info:
                        pet_name: Macota 3
                        user_name: User 3
                        user_email: user3@email.com
                        user_phone: '+573159874512'
                    - uuid: 44c79edd-1188-45dc-85af-7398ddee0546
                      subject: Solicitud de adopción
                      message: Mensaje de prueba.
                      addressee: refugio3@email.com
                      additional_info:
                        pet_name: Macota 3
                        user_name: User 3
                        user_email: user3@email.com
                        user_phone: '+573159874512'
                    - uuid: 44c79edd-1188-45dc-85af-7398ddee0546
                      subject: Solicitud de adopción
                      message: Mensaje de prueba.
                      addressee: refugio3@email.com
                      additional_info:
                        pet_name: Macota 3
                        user_name: User 3
                        user_email: user3@email.com
                        user_phone: '+573159874512'
                    - uuid: 44c79edd-1188-45dc-85af-7398ddee0546
                      subject: Solicitud de adopción
                      message: Mensaje de prueba.
                      addressee: refugio3@email.com
                      additional_info:
                        pet_name: Macota 3
                        user_name: User 3
                        user_email: user3@email.com
                        user_phone: '+573159874512'
                    - uuid: 44c79edd-1188-45dc-85af-7398ddee0546
                      subject: Solicitud de adopción
                      message: Mensaje de prueba.
                      addressee: refugio3@email.com
                      additional_info:
                        pet_name: Macota 3
                        user_name: User 3
                        user_email: user3@email.com
                        user_phone: '+573159874512'
                    - uuid: 44c79edd-1188-45dc-85af-7398ddee0546
                      subject: Solicitud de adopción
                      message: Mensaje de prueba.
                      addressee: refugio3@email.com
                      additional_info:
                        pet_name: Macota 3
                        user_name: User 3
                        user_email: user3@email.com
                        user_phone: '+573159874512'
                    - uuid: 44c79edd-1188-45dc-85af-7398ddee0546
                      subject: Solicitud de adopción
                      message: Mensaje de prueba.
                      addressee: refugio3@email.com
                      additional_info:
                        pet_name: Macota 3
                        user_name: User 3
                        user_email: user3@email.com
                        user_phone: '+573159874512'
                    - uuid: 44c79edd-1188-45dc-85af-7398ddee0546
                      subject: Solicitud de adopción
                      message: Mensaje de prueba.
                      addressee: refugio3@email.com
                      additional_info:
                        pet_name: Macota 3
                        user_name: User 3
                        user_email: user3@email.com
                        user_phone: '+573159874512'
                  summary: Request successful
                  description: This is an example of a successful request. In this
                    example, you can see how the information will be represented.
          description: '**OK**'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: This error message is used when the API cannot connect
                    to the database. In this example you can see how the information
                    will be represented.
          description: '**INTERNAL_SERVER_ERROR**'
  /api/v1/email/adoption/:
    post:
      operationId: send_adoption_pet_email
      description: |-
        Handle POST requests for sending an email to the shelter when a user applies for adoption.

        This method allows the sending of an email to the shelter when a user applies
        for adoption. It waits for a POST request with the required data, validates
        the information, and then sends the email if the data is valid or returns an
        error response if it is not.
      tags:
      - Emails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdoptionPetRequest'
            examples:
              DataValid:
                value:
                  pet_name: Mascota 1
                  shelter_uuid: 123e4567-e89b-12d3-a456-426614174000
                  user_name: User 1
                  user_email: user@email.com
                  user_phone: +57 3213514798
                  message: Mensaje de prueba
                summary: RegistData required for the message
                description: |-
                  Valid data required to send the message to the shelter. This message is a notification that will be sent to the shelter with the necessary information about the adoption request by a user of the platform. The following validations will be applied:
                  - **pet_name:** Must not be longer than 50 characters and valid string.
                  - **shelter_uuid:** Must be a valid UUID.
                  - **user_name:** Must not be longer than 50 characters and valid string.
                  - **user_email:** Must not be longer than 40 characters and valid email.
                  - **user_phone:** Must not be longer than 25 characters and valid phone number.
                  - **message:** Must not be longer than 300 characters and valid string.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AdoptionPetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdoptionPetRequest'
        required: true
      responses:
        '200':
          description: '**OK** Mail sent successfully.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
                    properties:
                      field:
                        type: array
                        items:
                          type: string
              examples:
                InvalidRequestData1:
                  value:
                    code: invalid_request_data
                    detail:
                      pet_name:
                      - El valor ingresado es inválido.
                      - El valor ingresado no puede tener más de 50 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      shelter_uuid:
                      - El id del refugio es inválido.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      user_phone:
                      - El número de teléfono es inválido.
                      - El número de teléfono no puede tener más de 25 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      user_name:
                      - El nombre es inválido.
                      - El nombre no puede tener más de 50 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      user_email:
                      - El correo electrónico es inválido.
                      - El correo electrónico no puede tener más de 40 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      message:
                      - El valor ingresado es inválido.
                      - El valor ingresado no puede tener más de 300 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                  summary: Invalid request data
                  description: These are all the basic error messages for each field,
                    in this example you can see how the messages will be sent. In
                    a real use case, the error message for the validation or validations
                    that have failed will be displayed.
          description: '**(BAD_REQUEST)**'
        '404':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: object
              examples:
                ShelterNotFound:
                  value:
                    code: shelter_not_found
                    detail:
                      message: shelter with the following filters not found.
                      filters:
                        base_user: 123e4567-e89b-12d3-a456-426614174000
                  summary: Pet shelter not found
                  description: This message is used when the shelter is not found.
                    In this example you can see how the information will be represented.
          description: '**NOT_FOUND**'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: This error message is used when the API cannot connect
                    to the database. In this example you can see how the information
                    will be represented.
          description: '**INTERNAL_SERVER_ERROR**'
  /api/v1/pet/:
    get:
      operationId: get_all_pets
      description: |-
        Handles GET requests to retrieve all pets from the database.

        This method allows retrieving all pets from the database. It paginates the
        response with a total of 10 items and returns a list of pets along with the
        pagination data.
      tags:
      - Pets
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                  previous:
                    type: string
                  field:
                    type: array
                    items:
                      type: object
              examples:
                RequestSuccess:
                  value:
                    count: 57
                    next: http://127.0.0.1:8000/api/v1/pet/97c6efb5d6cc429098e0047bde3de168/?page=2
                    previous: null
                    results:
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 9b092964-2425-4084-8886-94bb1aaffe79
                        name: Refugio 1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 7c6d696a-4905-4d1c-a87e-5d689b75e2c5
                        name: Refugio 2
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: a9d566eb-0357-4e8d-9f82-caf679e42902
                        name: Refugio 3
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: e8ebbec0-c55c-4c32-9ea2-69e1e689fd85
                        name: Refugio 4
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: c6f7b04b-9f3d-45a7-b8e1-0ba7b8ccaaeb
                        name: Refugio 5
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: e4b0f9df-f69b-4c18-8422-76c32a1e6358
                        name: Refugio 6
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 08cd74f2-ea1b-4c65-8dd9-7c17f71b660f
                        name: Refugio 7
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 60804cce-36d4-48bc-b026-9bd05d075e51
                        name: Refugio 8
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: b0c325f7-6337-44b1-b3f3-972a2d648648
                        name: Refugio 9
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 16389d01-89dc-4ccf-83af-f09a08b575dc
                        name: Refugio 10
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                  summary: Request successful
                  description: This is an example of a successful request. In this
                    example, you can see how the information will be represented.
          description: '**OK**'
        '404':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                PetNotFound:
                  value:
                    code: pet_not_found
                    detail: No pets found with the provided filters.
                  summary: Shelter not found
                  description: These are all the basic error messages for each field,
                    in this example you can see how the messages will be sent. In
                    a real use case, the error message for the validation or validations
                    that have failed will be displayed.
          description: '**NOT_FOUND**'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: This error message is used when the API cannot connect
                    to the database. In this example you can see how the information
                    will be represented.
          description: '**INTERNAL_SERVER_ERROR**'
    post:
      operationId: create_update_pet
      description: |-
        Handle POST requests for pet registration.

        This method allows the registration of a new pet. It waits for a POST
        request with a pet's data, validates the information, and then creates
        a new record if the data is valid or returns an error response if it is not.
      tags:
      - Pets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
            examples:
              DataValid:
                value:
                  pet_name: Hector
                  pet_type: Perro
                  pet_race: Pastor alemán
                  pet_sex: Macho
                  pet_age: 2
                  pet_observations: Cachorro muy juguetón.
                  pet_description: Cachorro muy juguetón.
                  pet_image: https://example.com/image.png
                summary: Register a new pet.
                description: |-
                  A valid pet registration data. The following validation rules are applied:
                  - **pet_name:** the name must be less than 50 characters.
                  - **pet_type:** the type of pet must be either Perro or Gato.
                  - **pet_sex:** the sex of the pet must be Macho or Hembra.
                  - **pet_age:** the age must be between 1 and 99.
                  \pet_observations, pet_description, and pet_image fields are optional.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PetRequest'
        required: true
      security:
      - JWTAuthentication: []
      responses:
        '201':
          description: '**CREATED** The pet was created successfully.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
                    properties:
                      field:
                        type: array
                        items:
                          type: string
              examples:
                InvalidRequestData:
                  value:
                    code: invalid_request_data
                    detail:
                      pet_name:
                      - El nombre no puede tener más de 50 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      pet_type:
                      - Loro no es una elección válida.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      pet_sex:
                      - M no es una elección válida.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      pet_race:
                      - El valor ingresado es inválido.
                      - El valor ingresad no puede tener más de 50 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      pet_age:
                      - El valor ingresado es inválido.
                      - Asegúrate que este valor sea menor o igual a 99.
                      - Asegúrate que este valor sea mayor o igual a 1.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      pet_observations:
                      - El valor ingresado no puede tener más de 200 caracteres.
                      pet_description:
                      - El valor ingresado no puede tener más de 200 caracteres.
                      pet_image:
                      - El valor ingresado no puede tener más de 200 caracteres.
                  summary: Invalid request data
                  description: These are all the basic error messages for each field,
                    in this example you can see how the messages will be sent. In
                    a real use case, the error message for the validation or validations
                    that have failed will be displayed.
          description: '**BAD_REQUEST**'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
              examples:
                AuthenticationFailed1:
                  value:
                    code: authentication_failed
                    detail: Authentication credentials were not provided.
                  summary: JWT was not found in headers
                  description: This error message is used when the JWT token is not
                    found in the headers. In this example you can see how the information
                    will be represented.
                AuthenticationFailed2:
                  value:
                    code: authentication_failed
                    detail:
                    - token_type: access
                      message: Token is invalid or expired
                  summary: JWT token is invalid or expired
                  description: This error message is used when the JWT token is invalid
                    or expired. In this example you can see how the information will
                    be represented.
          description: '**UNAUTHORIZED**'
        '403':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                PermissionDenied:
                  value:
                    code: permission_denied
                    detail: You are not allowed to access this resource.
                  summary: Permission denied
                  description: This error message is used when the user does not have
                    permission to access the resource, this endpoint can only be used
                    by authenticated users with **ShelterProfile** role. In this example
                    you can see how the information will be represented.
          description: '**FORBIDDEN**'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: This error message is used when the API cannot connect
                    to the database. In this example you can see how the information
                    will be represented.
          description: '**INTERNAL_SERVER_ERROR**'
  /api/v1/pet/{shelter_uuid}/:
    get:
      operationId: get_pet_by_shelter
      description: |-
        Handles GET requests to retrieve all pets from a specific shelter.

        This method allows retrieving all pets from a specific shelter. It paginates
        the response with a total of 10 items and returns a list of pets along with the
        pagination data.
      parameters:
      - in: path
        name: shelter_uuid
        schema:
          type: string
        required: true
      tags:
      - Pets
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                  previous:
                    type: string
                  field:
                    type: array
                    items:
                      type: object
              examples:
                RequestSuccess:
                  value:
                    count: 57
                    next: http://127.0.0.1:8000/api/v1/pet/97c6efb5d6cc429098e0047bde3de168/?page=2
                    previous: null
                    results:
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 58774f38-96f3-4550-a212-d35923c5bf9e
                        name: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 58774f38-96f3-4550-a212-d35923c5bf9e
                        name: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 58774f38-96f3-4550-a212-d35923c5bf9e
                        name: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 58774f38-96f3-4550-a212-d35923c5bf9e
                        name: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 58774f38-96f3-4550-a212-d35923c5bf9e
                        name: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 58774f38-96f3-4550-a212-d35923c5bf9e
                        name: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 58774f38-96f3-4550-a212-d35923c5bf9e
                        name: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 58774f38-96f3-4550-a212-d35923c5bf9e
                        name: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 58774f38-96f3-4550-a212-d35923c5bf9e
                        name: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                    - pet_name: mascota1
                      pet_type: Perro
                      pet_sex: Macho
                      shelter:
                        uud: 58774f38-96f3-4550-a212-d35923c5bf9e
                        name: Refugio1
                      pet_race: pastor aleman
                      pet_age: 2
                      pet_observations: sin observaciones
                      pet_description: sin descripciones
                      pet_image: https://imagedefault.com
                  summary: Request successful
                  description: This is an example of a successful request. In this
                    example, you can see how the information will be represented.
          description: '**OK**'
        '404':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: string
              examples:
                PetNotFound:
                  value:
                    code: pet_not_found
                    detail: No pets found with the provided filters.
                  summary: Shelter not found
                  description: These are all the basic error messages for each field,
                    in this example you can see how the messages will be sent. In
                    a real use case, the error message for the validation or validations
                    that have failed will be displayed.
          description: '**NOT_FOUND**'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: This error message is used when the API cannot connect
                    to the database. In this example you can see how the information
                    will be represented.
          description: '**INTERNAL_SERVER_ERROR**'
  /api/v1/shelter/:
    post:
      operationId: v1_shelter_create
      description: |-
        Handle POST requests for shelter registration.

        This method allows the registration of a new shelter. It waits for a POST
        request with a shelter's data, validates the information, and then creates
        a new record if the data is valid or returns an error response if it is not.
      tags:
      - Shelters
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShelterRequest'
            examples:
              DataValid:
                value:
                  email: shelter1@example.com
                  password: contraseña1234
                  confirm_password: contraseña1234
                  shelter_phone_number: +57 3213149578
                  shelter_name: Refugio de animales
                  shelter_address: 'Calle 123 # 45-67'
                  shelter_responsible: Juan Pérez
                  shelter_logo: https://example.com/logo.png
                summary: Register a new shelter.
                description: |-
                  A valid shelter registration data. The following validations will be applied:
                  - **email:** Must be in a valid email format, no longer than 40 characters and not in use.
                  - **password:** Must be at least 8 characters, not more than 20 characters, and not a common or simple password.
                  - **confirm_password:** Must match the password.
                  - **shelter_phone_number:** Must be a valid phone number, no longer than 25 characters.
                  - **shelter_name:** Must not be longer than 50 characters and not in use.
                  - **shelter_address:** Must not be longer than 100 characters.
                  - **shelter_responsible:** Must not be longer than 50 characters.
                  - **shelter_logo:** Must not be longer than 200 characters.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ShelterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ShelterRequest'
        required: true
      responses:
        '201':
          description: '**CREATED** The shelter was created successfully.'
        '400':
          content:
            application/json:
              schema:
                properties:
                  code:
                    type: string
                  detail:
                    type: object
                    properties:
                      field:
                        type: array
                        items:
                          type: string
              examples:
                InvalidRequestData1:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - El correo electrónico es inválido.
                      - El correo electrónico no puede tener más de 40 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      password:
                      - La contraseña no puede tener más de 20 caracteres.La contraseña
                        debe tener al menos8 caracteres.
                      - La contraseña debe contener al menos una mayuscula o una minuscula.
                      - Esta contraseña es demasiado común.Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      shelter_phone_number:
                      - El número de teléfono es inválido.
                      - El número de teléfono no puede tener más de 25 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      shelter_name:
                      - El nombre no puede tener más de 50 caracteres.
                      - Este nombre ya está en uso.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      shelter_address:
                      - El dirección no puede tener más de 100 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      shelter_responsible:
                      - El valor ingresado no puede tener más de 50 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                      shelter_logo:
                      - El valor ingresado no puede tener más de 200 caracteres.
                      - Este campo es requerido.
                      - Este campo no puede estar en blanco.
                      - Este campo no puede ser nulo.
                  summary: Invalid request data
                  description: These are all the basic error messages for each field,
                    in this example you can see how the messages will be sent. In
                    a real use case, the error message for the validation or validations
                    that have failed will be displayed.
                PasswordsNotMatch:
                  value:
                    code: invalid_request_data2
                    detail:
                      confirm_password:
                      - Las contraseñas no coinciden.
                  summary: Passwords do not match
                  description: This error message is used when the passwords do not
                    match. In this example you can see how the information will be
                    represented.
                InvalidRequestData3:
                  value:
                    code: invalid_request_data
                    detail:
                      email:
                      - Este correo electrónico ya está en uso.
                  summary: Email already in use
                  description: This error message is used when the email is already
                    in use. In this example you can see how the information will be
                    represented.
          description: '**(BAD_REQUEST)**'
        '500':
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                  code:
                    type: string
              examples:
                DatabaseConnectionError:
                  value:
                    code: database_connection_error
                    detail: Unable to establish a connection with the database. Please
                      try again later.
                  summary: Database connection error
                  description: This error message is used when the API cannot connect
                    to the database. In this example you can see how the information
                    will be represented.
          description: '**INTERNAL_SERVER_ERROR**'
components:
  schemas:
    AdminRequest:
      type: object
      description: Defines the data required to register a admin in the system.
      properties:
        email:
          type: string
          minLength: 1
          pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
          maxLength: 40
        password:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 20
        confirm_password:
          type: string
          writeOnly: true
          minLength: 1
        admin_name:
          type: string
          minLength: 1
          maxLength: 50
      required:
      - admin_name
      - confirm_password
      - email
      - password
    AdoptionPetRequest:
      type: object
      description: |-
        Defines the data required to send an email to the shelter when a user applies for
        adoption.
      properties:
        pet_name:
          type: string
          minLength: 1
          maxLength: 50
        shelter_uuid:
          type: string
          format: uuid
        user_name:
          type: string
          minLength: 1
          maxLength: 50
        user_email:
          type: string
          minLength: 1
          pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
          maxLength: 40
        user_phone:
          type: string
          minLength: 1
          maxLength: 25
        message:
          type: string
          minLength: 1
          maxLength: 300
      required:
      - message
      - pet_name
      - shelter_uuid
      - user_email
      - user_name
      - user_phone
    Array:
      type: object
      properties:
        detail:
          type: array
          items: {}
        code:
          type: string
      required:
      - code
      - detail
    AuthenticationRequest:
      type: object
      description: |-
        Handles the data for user authentication. Checks that the provided email and
        password meet the necessary requirements.
      properties:
        email:
          type: string
          minLength: 1
          pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
          maxLength: 40
        password:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 20
      required:
      - email
      - password
    PetRequest:
      type: object
      description: Defines the data required to register or update a pet in the system.
      properties:
        pet_name:
          type: string
          minLength: 1
          maxLength: 50
        pet_type:
          $ref: '#/components/schemas/PetTypeEnum'
        pet_sex:
          $ref: '#/components/schemas/PetSexEnum'
        pet_race:
          type: string
          minLength: 1
          maxLength: 50
        pet_age:
          type: integer
          maximum: 99
          minimum: 1
        pet_observations:
          type: string
          minLength: 1
          maxLength: 200
        pet_description:
          type: string
          minLength: 1
          maxLength: 200
        pet_image:
          type: string
          format: uri
          minLength: 1
          maxLength: 200
      required:
      - pet_age
      - pet_name
      - pet_race
      - pet_sex
      - pet_type
    PetSexEnum:
      enum:
      - Macho
      - Hembra
      type: string
      description: |-
        * `Macho` - Macho
        * `Hembra` - Hembra
    PetTypeEnum:
      enum:
      - Perro
      - Gato
      type: string
      description: |-
        * `Perro` - Perro
        * `Gato` - Gato
    Response:
      oneOf:
      - $ref: '#/components/schemas/String'
      - $ref: '#/components/schemas/Array'
      discriminator:
        propertyName: detail
        mapping:
          None: '#/components/schemas/String'
          Array: '#/components/schemas/Array'
    ShelterRequest:
      type: object
      description: Defines the data required to register a shelter in the system.
      properties:
        email:
          type: string
          minLength: 1
          pattern: ^([A-Za-z0-9]+[-_.])*[A-Za-z0-9]+@[A-Za-z]+(\.[A-Z|a-z]{2,4}){1,2}$
          maxLength: 40
        password:
          type: string
          writeOnly: true
          minLength: 8
          maxLength: 20
        confirm_password:
          type: string
          writeOnly: true
          minLength: 1
        shelter_phone_number:
          type: string
          minLength: 1
          maxLength: 25
        shelter_name:
          type: string
          minLength: 1
          maxLength: 50
        shelter_address:
          type: string
          minLength: 1
          maxLength: 100
        shelter_responsible:
          type: string
          minLength: 1
          maxLength: 50
        shelter_logo:
          type: string
          format: uri
          minLength: 1
          maxLength: 200
      required:
      - confirm_password
      - email
      - password
      - shelter_address
      - shelter_name
      - shelter_phone_number
      - shelter_responsible
    String:
      type: object
      properties:
        detail:
          type: string
        code:
          type: string
      required:
      - code
      - detail
  securitySchemes:
    JWTAuthentication:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: This endpoint requires JWT authentication.
tags:
- name: JSON Web Token
  description: It comprises all the endpoints that manage all the functionality related
    to the authentication of a user in the API.
- name: Administrators
  description: It comprises all the endpoints that manage all the functionality related
    to an administrator in the API.
- name: Shelters
  description: It comprises all the endpoints that manage all the functionality related
    to a shelter in the API.
- name: Pets
  description: It comprises all the endpoints that manage all the functionality related
    to a pet in the API.
- name: Emails
  description: It comprises all the endpoints that manage all the functionality related
    to the sending of emails in the API.
