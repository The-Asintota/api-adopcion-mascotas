# Generated by Django 5.0.4 on 2024-04-11 04:12

import apps.users.models
import django.db.models.deletion
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="TypePet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        db_column="id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "type_name",
                    models.CharField(db_column="type_name", max_length=50),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        auto_now_add=True, db_column="date joined"
                    ),
                ),
            ],
            options={
                "verbose_name": "TypePet",
                "verbose_name_plural": "TypePets",
                "db_table": "type_pet",
                "ordering": ["-date_joined"],
            },
        ),
        migrations.CreateModel(
            name="BaseUser",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        db_column="uuid",
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_column="email",
                        db_index=True,
                        max_length=90,
                        unique=True,
                    ),
                ),
                (
                    "password",
                    models.CharField(db_column="password", max_length=128),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_column="is active", db_index=True, default=False
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(db_column="is_staff", default=False),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        db_column="is_superuser", default=False
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, db_column="last login", null=True
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        auto_now_add=True, db_column="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "base user",
                "verbose_name_plural": "base users",
                "db_table": "base_users",
                "ordering": ["is_active", "-date_joined"],
            },
            managers=[
                ("objects", apps.users.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="AdminUser",
            fields=[
                (
                    "admin_uuid",
                    models.UUIDField(
                        db_column="admin_uuid",
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "admin_name",
                    models.CharField(db_column="admin_name", max_length=50),
                ),
                (
                    "base_user",
                    models.OneToOneField(
                        db_column="base_user",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "administrator",
                "verbose_name_plural": "administrators",
                "db_table": "administrators",
                "ordering": ["-base_user__date_joined"],
            },
        ),
        migrations.CreateModel(
            name="JWT",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        db_column="id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "jti",
                    models.CharField(
                        db_column="jti",
                        db_index=True,
                        max_length=255,
                        unique=True,
                    ),
                ),
                ("token", models.TextField(db_column="token")),
                ("expires_at", models.DateTimeField(db_column="expires_at")),
                (
                    "date_joined",
                    models.DateTimeField(
                        auto_now_add=True, db_column="date joined"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_column="user",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "jwt",
                "verbose_name_plural": "jwts",
                "db_table": "jwt",
                "ordering": ["-date_joined"],
            },
        ),
        migrations.CreateModel(
            name="JWTBlacklist",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        db_column="id", primary_key=True, serialize=False
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        auto_now_add=True, db_column="date_joined"
                    ),
                ),
                (
                    "token_id",
                    models.OneToOneField(
                        db_column="token_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.jwt",
                    ),
                ),
            ],
            options={
                "verbose_name": "jwt_blacklist",
                "verbose_name_plural": "jwt_blacklist",
                "db_table": "jwt_blacklist",
                "ordering": ["-date_joined"],
            },
        ),
        migrations.CreateModel(
            name="Shelter",
            fields=[
                (
                    "shelter_uuid",
                    models.UUIDField(
                        db_column="shelter_uuid",
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "shelter_name",
                    models.CharField(db_column="name", max_length=50),
                ),
                (
                    "address",
                    models.CharField(db_column="address", max_length=100),
                ),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        db_column="phone_number", max_length=25, region=None
                    ),
                ),
                (
                    "responsible",
                    models.CharField(db_column="responsible", max_length=50),
                ),
                ("logo_url", models.URLField(db_column="logo_url")),
                (
                    "base_user",
                    models.OneToOneField(
                        db_column="base_user",
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Shelter",
                "verbose_name_plural": "Shelters",
                "db_table": "shelters",
                "ordering": ["-base_user__date_joined"],
            },
        ),
        migrations.CreateModel(
            name="Pet",
            fields=[
                (
                    "pet_uuid",
                    models.UUIDField(
                        db_column="pet_uuid",
                        default=uuid.uuid4,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "pet_name",
                    models.CharField(db_column="pet_name", max_length=50),
                ),
                ("race", models.CharField(db_column="race", max_length=50)),
                ("age", models.IntegerField(db_column="age")),
                (
                    "observations",
                    models.CharField(
                        db_column="observations",
                        default="sin observaciones",
                        max_length=200,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        db_column="description",
                        default="sin descripciones",
                        max_length=200,
                    ),
                ),
                (
                    "image",
                    models.URLField(
                        db_column="image", default="https://imagedefault.com"
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        auto_now_add=True, db_column="date joined"
                    ),
                ),
                (
                    "shelter",
                    models.ForeignKey(
                        db_column="shelter",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.shelter",
                    ),
                ),
                (
                    "type_pet",
                    models.ForeignKey(
                        db_column="type_pet",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.typepet",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pet",
                "verbose_name_plural": "Pets",
                "db_table": "pets",
                "ordering": ["-date_joined"],
            },
        ),
        migrations.AddIndex(
            model_name="baseuser",
            index=models.Index(
                fields=["email", "is_active"], name="email_is_active_idx"
            ),
        ),
    ]
